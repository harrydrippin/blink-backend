// Code generated by protoc-gen-go. DO NOT EDIT.
// source: blink.proto

package blink

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UploadStatusCode int32

const (
	UploadStatusCode_Unknown UploadStatusCode = 0
	UploadStatusCode_OK      UploadStatusCode = 1
	UploadStatusCode_Failed  UploadStatusCode = 2
)

var UploadStatusCode_name = map[int32]string{
	0: "Unknown",
	1: "OK",
	2: "Failed",
}

var UploadStatusCode_value = map[string]int32{
	"Unknown": 0,
	"OK":      1,
	"Failed":  2,
}

func (x UploadStatusCode) String() string {
	return proto.EnumName(UploadStatusCode_name, int32(x))
}

func (UploadStatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f0066e5e7b5ba8cd, []int{0}
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0066e5e7b5ba8cd, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type Location struct {
	Latitude             float32  `protobuf:"fixed32,1,opt,name=Latitude,proto3" json:"Latitude,omitempty"`
	Longitude            float32  `protobuf:"fixed32,2,opt,name=Longitude,proto3" json:"Longitude,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Location) Reset()         { *m = Location{} }
func (m *Location) String() string { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()    {}
func (*Location) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0066e5e7b5ba8cd, []int{1}
}

func (m *Location) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Location.Unmarshal(m, b)
}
func (m *Location) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Location.Marshal(b, m, deterministic)
}
func (m *Location) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Location.Merge(m, src)
}
func (m *Location) XXX_Size() int {
	return xxx_messageInfo_Location.Size(m)
}
func (m *Location) XXX_DiscardUnknown() {
	xxx_messageInfo_Location.DiscardUnknown(m)
}

var xxx_messageInfo_Location proto.InternalMessageInfo

func (m *Location) GetLatitude() float32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Location) GetLongitude() float32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

type Client struct {
	Nickname             string    `protobuf:"bytes,1,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	Location             *Location `protobuf:"bytes,2,opt,name=Location,proto3" json:"Location,omitempty"`
	AwayDistance         float32   `protobuf:"fixed32,3,opt,name=AwayDistance,proto3" json:"AwayDistance,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Client) Reset()         { *m = Client{} }
func (m *Client) String() string { return proto.CompactTextString(m) }
func (*Client) ProtoMessage()    {}
func (*Client) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0066e5e7b5ba8cd, []int{2}
}

func (m *Client) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Client.Unmarshal(m, b)
}
func (m *Client) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Client.Marshal(b, m, deterministic)
}
func (m *Client) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Client.Merge(m, src)
}
func (m *Client) XXX_Size() int {
	return xxx_messageInfo_Client.Size(m)
}
func (m *Client) XXX_DiscardUnknown() {
	xxx_messageInfo_Client.DiscardUnknown(m)
}

var xxx_messageInfo_Client proto.InternalMessageInfo

func (m *Client) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *Client) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Client) GetAwayDistance() float32 {
	if m != nil {
		return m.AwayDistance
	}
	return 0
}

type Nickname struct {
	Nickname             string   `protobuf:"bytes,1,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Nickname) Reset()         { *m = Nickname{} }
func (m *Nickname) String() string { return proto.CompactTextString(m) }
func (*Nickname) ProtoMessage()    {}
func (*Nickname) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0066e5e7b5ba8cd, []int{3}
}

func (m *Nickname) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Nickname.Unmarshal(m, b)
}
func (m *Nickname) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Nickname.Marshal(b, m, deterministic)
}
func (m *Nickname) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nickname.Merge(m, src)
}
func (m *Nickname) XXX_Size() int {
	return xxx_messageInfo_Nickname.Size(m)
}
func (m *Nickname) XXX_DiscardUnknown() {
	xxx_messageInfo_Nickname.DiscardUnknown(m)
}

var xxx_messageInfo_Nickname proto.InternalMessageInfo

func (m *Nickname) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

type Spot struct {
	Id                   uint32    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Nickname             string    `protobuf:"bytes,2,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	Location             *Location `protobuf:"bytes,3,opt,name=Location,proto3" json:"Location,omitempty"`
	Uuid                 string    `protobuf:"bytes,4,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Spot) Reset()         { *m = Spot{} }
func (m *Spot) String() string { return proto.CompactTextString(m) }
func (*Spot) ProtoMessage()    {}
func (*Spot) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0066e5e7b5ba8cd, []int{4}
}

func (m *Spot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Spot.Unmarshal(m, b)
}
func (m *Spot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Spot.Marshal(b, m, deterministic)
}
func (m *Spot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Spot.Merge(m, src)
}
func (m *Spot) XXX_Size() int {
	return xxx_messageInfo_Spot.Size(m)
}
func (m *Spot) XXX_DiscardUnknown() {
	xxx_messageInfo_Spot.DiscardUnknown(m)
}

var xxx_messageInfo_Spot proto.InternalMessageInfo

func (m *Spot) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Spot) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *Spot) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Spot) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type NicknameResp struct {
	Result               bool     `protobuf:"varint,1,opt,name=Result,proto3" json:"Result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NicknameResp) Reset()         { *m = NicknameResp{} }
func (m *NicknameResp) String() string { return proto.CompactTextString(m) }
func (*NicknameResp) ProtoMessage()    {}
func (*NicknameResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0066e5e7b5ba8cd, []int{5}
}

func (m *NicknameResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NicknameResp.Unmarshal(m, b)
}
func (m *NicknameResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NicknameResp.Marshal(b, m, deterministic)
}
func (m *NicknameResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NicknameResp.Merge(m, src)
}
func (m *NicknameResp) XXX_Size() int {
	return xxx_messageInfo_NicknameResp.Size(m)
}
func (m *NicknameResp) XXX_DiscardUnknown() {
	xxx_messageInfo_NicknameResp.DiscardUnknown(m)
}

var xxx_messageInfo_NicknameResp proto.InternalMessageInfo

func (m *NicknameResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

type ReceiverInfo struct {
	Nickname             string    `protobuf:"bytes,1,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	Location             *Location `protobuf:"bytes,2,opt,name=Location,proto3" json:"Location,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ReceiverInfo) Reset()         { *m = ReceiverInfo{} }
func (m *ReceiverInfo) String() string { return proto.CompactTextString(m) }
func (*ReceiverInfo) ProtoMessage()    {}
func (*ReceiverInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0066e5e7b5ba8cd, []int{6}
}

func (m *ReceiverInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReceiverInfo.Unmarshal(m, b)
}
func (m *ReceiverInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReceiverInfo.Marshal(b, m, deterministic)
}
func (m *ReceiverInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReceiverInfo.Merge(m, src)
}
func (m *ReceiverInfo) XXX_Size() int {
	return xxx_messageInfo_ReceiverInfo.Size(m)
}
func (m *ReceiverInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ReceiverInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ReceiverInfo proto.InternalMessageInfo

func (m *ReceiverInfo) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *ReceiverInfo) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

//*
// UploadFileRequest, UploadFile
type UploadFileRequestReq struct {
	Nickname             string   `protobuf:"bytes,1,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	Filename             string   `protobuf:"bytes,2,opt,name=Filename,proto3" json:"Filename,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadFileRequestReq) Reset()         { *m = UploadFileRequestReq{} }
func (m *UploadFileRequestReq) String() string { return proto.CompactTextString(m) }
func (*UploadFileRequestReq) ProtoMessage()    {}
func (*UploadFileRequestReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0066e5e7b5ba8cd, []int{7}
}

func (m *UploadFileRequestReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadFileRequestReq.Unmarshal(m, b)
}
func (m *UploadFileRequestReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadFileRequestReq.Marshal(b, m, deterministic)
}
func (m *UploadFileRequestReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadFileRequestReq.Merge(m, src)
}
func (m *UploadFileRequestReq) XXX_Size() int {
	return xxx_messageInfo_UploadFileRequestReq.Size(m)
}
func (m *UploadFileRequestReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadFileRequestReq.DiscardUnknown(m)
}

var xxx_messageInfo_UploadFileRequestReq proto.InternalMessageInfo

func (m *UploadFileRequestReq) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *UploadFileRequestReq) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

type UploadFileRequestResp struct {
	Result               bool     `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Uuid                 string   `protobuf:"bytes,2,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadFileRequestResp) Reset()         { *m = UploadFileRequestResp{} }
func (m *UploadFileRequestResp) String() string { return proto.CompactTextString(m) }
func (*UploadFileRequestResp) ProtoMessage()    {}
func (*UploadFileRequestResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0066e5e7b5ba8cd, []int{8}
}

func (m *UploadFileRequestResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadFileRequestResp.Unmarshal(m, b)
}
func (m *UploadFileRequestResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadFileRequestResp.Marshal(b, m, deterministic)
}
func (m *UploadFileRequestResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadFileRequestResp.Merge(m, src)
}
func (m *UploadFileRequestResp) XXX_Size() int {
	return xxx_messageInfo_UploadFileRequestResp.Size(m)
}
func (m *UploadFileRequestResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadFileRequestResp.DiscardUnknown(m)
}

var xxx_messageInfo_UploadFileRequestResp proto.InternalMessageInfo

func (m *UploadFileRequestResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *UploadFileRequestResp) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type FileChunk struct {
	Uuid                 string   `protobuf:"bytes,1,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	Chunk                []byte   `protobuf:"bytes,2,opt,name=Chunk,proto3" json:"Chunk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileChunk) Reset()         { *m = FileChunk{} }
func (m *FileChunk) String() string { return proto.CompactTextString(m) }
func (*FileChunk) ProtoMessage()    {}
func (*FileChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0066e5e7b5ba8cd, []int{9}
}

func (m *FileChunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileChunk.Unmarshal(m, b)
}
func (m *FileChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileChunk.Marshal(b, m, deterministic)
}
func (m *FileChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileChunk.Merge(m, src)
}
func (m *FileChunk) XXX_Size() int {
	return xxx_messageInfo_FileChunk.Size(m)
}
func (m *FileChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_FileChunk.DiscardUnknown(m)
}

var xxx_messageInfo_FileChunk proto.InternalMessageInfo

func (m *FileChunk) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *FileChunk) GetChunk() []byte {
	if m != nil {
		return m.Chunk
	}
	return nil
}

type UploadFileResp struct {
	Code                 UploadStatusCode `protobuf:"varint,1,opt,name=Code,proto3,enum=UploadStatusCode" json:"Code,omitempty"`
	Uuid                 string           `protobuf:"bytes,2,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *UploadFileResp) Reset()         { *m = UploadFileResp{} }
func (m *UploadFileResp) String() string { return proto.CompactTextString(m) }
func (*UploadFileResp) ProtoMessage()    {}
func (*UploadFileResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0066e5e7b5ba8cd, []int{10}
}

func (m *UploadFileResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadFileResp.Unmarshal(m, b)
}
func (m *UploadFileResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadFileResp.Marshal(b, m, deterministic)
}
func (m *UploadFileResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadFileResp.Merge(m, src)
}
func (m *UploadFileResp) XXX_Size() int {
	return xxx_messageInfo_UploadFileResp.Size(m)
}
func (m *UploadFileResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadFileResp.DiscardUnknown(m)
}

var xxx_messageInfo_UploadFileResp proto.InternalMessageInfo

func (m *UploadFileResp) GetCode() UploadStatusCode {
	if m != nil {
		return m.Code
	}
	return UploadStatusCode_Unknown
}

func (m *UploadFileResp) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type SendRequestReq struct {
	Nickname             string   `protobuf:"bytes,1,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	ReceiverNickname     string   `protobuf:"bytes,2,opt,name=ReceiverNickname,proto3" json:"ReceiverNickname,omitempty"`
	Uuid                 string   `protobuf:"bytes,3,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendRequestReq) Reset()         { *m = SendRequestReq{} }
func (m *SendRequestReq) String() string { return proto.CompactTextString(m) }
func (*SendRequestReq) ProtoMessage()    {}
func (*SendRequestReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0066e5e7b5ba8cd, []int{11}
}

func (m *SendRequestReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendRequestReq.Unmarshal(m, b)
}
func (m *SendRequestReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendRequestReq.Marshal(b, m, deterministic)
}
func (m *SendRequestReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendRequestReq.Merge(m, src)
}
func (m *SendRequestReq) XXX_Size() int {
	return xxx_messageInfo_SendRequestReq.Size(m)
}
func (m *SendRequestReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SendRequestReq.DiscardUnknown(m)
}

var xxx_messageInfo_SendRequestReq proto.InternalMessageInfo

func (m *SendRequestReq) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *SendRequestReq) GetReceiverNickname() string {
	if m != nil {
		return m.ReceiverNickname
	}
	return ""
}

func (m *SendRequestReq) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type SendRequestResp struct {
	Result               bool     `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendRequestResp) Reset()         { *m = SendRequestResp{} }
func (m *SendRequestResp) String() string { return proto.CompactTextString(m) }
func (*SendRequestResp) ProtoMessage()    {}
func (*SendRequestResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0066e5e7b5ba8cd, []int{12}
}

func (m *SendRequestResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendRequestResp.Unmarshal(m, b)
}
func (m *SendRequestResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendRequestResp.Marshal(b, m, deterministic)
}
func (m *SendRequestResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendRequestResp.Merge(m, src)
}
func (m *SendRequestResp) XXX_Size() int {
	return xxx_messageInfo_SendRequestResp.Size(m)
}
func (m *SendRequestResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SendRequestResp.DiscardUnknown(m)
}

var xxx_messageInfo_SendRequestResp proto.InternalMessageInfo

func (m *SendRequestResp) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

//*
// RespondGrant, RespondDenial
type ReceiveRequest struct {
	Nickname             string   `protobuf:"bytes,1,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	ReceiverNickname     string   `protobuf:"bytes,2,opt,name=ReceiverNickname,proto3" json:"ReceiverNickname,omitempty"`
	Filename             string   `protobuf:"bytes,3,opt,name=Filename,proto3" json:"Filename,omitempty"`
	Uuid                 string   `protobuf:"bytes,4,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReceiveRequest) Reset()         { *m = ReceiveRequest{} }
func (m *ReceiveRequest) String() string { return proto.CompactTextString(m) }
func (*ReceiveRequest) ProtoMessage()    {}
func (*ReceiveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0066e5e7b5ba8cd, []int{13}
}

func (m *ReceiveRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReceiveRequest.Unmarshal(m, b)
}
func (m *ReceiveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReceiveRequest.Marshal(b, m, deterministic)
}
func (m *ReceiveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReceiveRequest.Merge(m, src)
}
func (m *ReceiveRequest) XXX_Size() int {
	return xxx_messageInfo_ReceiveRequest.Size(m)
}
func (m *ReceiveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReceiveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReceiveRequest proto.InternalMessageInfo

func (m *ReceiveRequest) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *ReceiveRequest) GetReceiverNickname() string {
	if m != nil {
		return m.ReceiverNickname
	}
	return ""
}

func (m *ReceiveRequest) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *ReceiveRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type FileLink struct {
	Link                 string   `protobuf:"bytes,1,opt,name=Link,proto3" json:"Link,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileLink) Reset()         { *m = FileLink{} }
func (m *FileLink) String() string { return proto.CompactTextString(m) }
func (*FileLink) ProtoMessage()    {}
func (*FileLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0066e5e7b5ba8cd, []int{14}
}

func (m *FileLink) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileLink.Unmarshal(m, b)
}
func (m *FileLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileLink.Marshal(b, m, deterministic)
}
func (m *FileLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileLink.Merge(m, src)
}
func (m *FileLink) XXX_Size() int {
	return xxx_messageInfo_FileLink.Size(m)
}
func (m *FileLink) XXX_DiscardUnknown() {
	xxx_messageInfo_FileLink.DiscardUnknown(m)
}

var xxx_messageInfo_FileLink proto.InternalMessageInfo

func (m *FileLink) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

//*
// MakeSpot
type MakeSpotReq struct {
	Nickname             string    `protobuf:"bytes,1,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	Location             *Location `protobuf:"bytes,2,opt,name=Location,proto3" json:"Location,omitempty"`
	Uuid                 string    `protobuf:"bytes,3,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *MakeSpotReq) Reset()         { *m = MakeSpotReq{} }
func (m *MakeSpotReq) String() string { return proto.CompactTextString(m) }
func (*MakeSpotReq) ProtoMessage()    {}
func (*MakeSpotReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0066e5e7b5ba8cd, []int{15}
}

func (m *MakeSpotReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MakeSpotReq.Unmarshal(m, b)
}
func (m *MakeSpotReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MakeSpotReq.Marshal(b, m, deterministic)
}
func (m *MakeSpotReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MakeSpotReq.Merge(m, src)
}
func (m *MakeSpotReq) XXX_Size() int {
	return xxx_messageInfo_MakeSpotReq.Size(m)
}
func (m *MakeSpotReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MakeSpotReq.DiscardUnknown(m)
}

var xxx_messageInfo_MakeSpotReq proto.InternalMessageInfo

func (m *MakeSpotReq) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *MakeSpotReq) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *MakeSpotReq) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type MakeSpotResp struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MakeSpotResp) Reset()         { *m = MakeSpotResp{} }
func (m *MakeSpotResp) String() string { return proto.CompactTextString(m) }
func (*MakeSpotResp) ProtoMessage()    {}
func (*MakeSpotResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0066e5e7b5ba8cd, []int{16}
}

func (m *MakeSpotResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MakeSpotResp.Unmarshal(m, b)
}
func (m *MakeSpotResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MakeSpotResp.Marshal(b, m, deterministic)
}
func (m *MakeSpotResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MakeSpotResp.Merge(m, src)
}
func (m *MakeSpotResp) XXX_Size() int {
	return xxx_messageInfo_MakeSpotResp.Size(m)
}
func (m *MakeSpotResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MakeSpotResp.DiscardUnknown(m)
}

var xxx_messageInfo_MakeSpotResp proto.InternalMessageInfo

func (m *MakeSpotResp) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetSpotByIdReq struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSpotByIdReq) Reset()         { *m = GetSpotByIdReq{} }
func (m *GetSpotByIdReq) String() string { return proto.CompactTextString(m) }
func (*GetSpotByIdReq) ProtoMessage()    {}
func (*GetSpotByIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0066e5e7b5ba8cd, []int{17}
}

func (m *GetSpotByIdReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSpotByIdReq.Unmarshal(m, b)
}
func (m *GetSpotByIdReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSpotByIdReq.Marshal(b, m, deterministic)
}
func (m *GetSpotByIdReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpotByIdReq.Merge(m, src)
}
func (m *GetSpotByIdReq) XXX_Size() int {
	return xxx_messageInfo_GetSpotByIdReq.Size(m)
}
func (m *GetSpotByIdReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpotByIdReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpotByIdReq proto.InternalMessageInfo

func (m *GetSpotByIdReq) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterEnum("UploadStatusCode", UploadStatusCode_name, UploadStatusCode_value)
	proto.RegisterType((*Empty)(nil), "Empty")
	proto.RegisterType((*Location)(nil), "Location")
	proto.RegisterType((*Client)(nil), "Client")
	proto.RegisterType((*Nickname)(nil), "Nickname")
	proto.RegisterType((*Spot)(nil), "Spot")
	proto.RegisterType((*NicknameResp)(nil), "NicknameResp")
	proto.RegisterType((*ReceiverInfo)(nil), "ReceiverInfo")
	proto.RegisterType((*UploadFileRequestReq)(nil), "UploadFileRequestReq")
	proto.RegisterType((*UploadFileRequestResp)(nil), "UploadFileRequestResp")
	proto.RegisterType((*FileChunk)(nil), "FileChunk")
	proto.RegisterType((*UploadFileResp)(nil), "UploadFileResp")
	proto.RegisterType((*SendRequestReq)(nil), "SendRequestReq")
	proto.RegisterType((*SendRequestResp)(nil), "SendRequestResp")
	proto.RegisterType((*ReceiveRequest)(nil), "ReceiveRequest")
	proto.RegisterType((*FileLink)(nil), "FileLink")
	proto.RegisterType((*MakeSpotReq)(nil), "MakeSpotReq")
	proto.RegisterType((*MakeSpotResp)(nil), "MakeSpotResp")
	proto.RegisterType((*GetSpotByIdReq)(nil), "GetSpotByIdReq")
}

func init() { proto.RegisterFile("blink.proto", fileDescriptor_f0066e5e7b5ba8cd) }

var fileDescriptor_f0066e5e7b5ba8cd = []byte{
	// 753 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xfd, 0x4e, 0xdb, 0x30,
	0x10, 0x4f, 0xd2, 0x0f, 0xda, 0xeb, 0xb7, 0x05, 0x08, 0x45, 0x13, 0x62, 0x96, 0x60, 0xc0, 0x36,
	0x6b, 0x2a, 0xe2, 0x01, 0xd6, 0x76, 0x54, 0x15, 0x1d, 0x63, 0xa9, 0x78, 0x80, 0xd0, 0x78, 0x23,
	0x6a, 0xe2, 0x84, 0xc6, 0x19, 0xeb, 0x1b, 0xec, 0xdd, 0xf6, 0x52, 0x93, 0x9d, 0xe6, 0xab, 0x04,
	0xc6, 0x1f, 0xfc, 0x55, 0x9f, 0xef, 0xe7, 0xbb, 0xf3, 0xef, 0x7e, 0xe7, 0x14, 0x1a, 0xb7, 0x8e,
	0xcd, 0x16, 0xc4, 0x5f, 0x7a, 0xdc, 0xc3, 0x5b, 0x50, 0xf9, 0xe2, 0xfa, 0x7c, 0x85, 0x47, 0x50,
	0x9b, 0x7a, 0x73, 0x93, 0xdb, 0x1e, 0x43, 0x3a, 0xd4, 0xa6, 0x26, 0xb7, 0x79, 0x68, 0xd1, 0x3d,
	0xf5, 0x40, 0x3d, 0xd6, 0x8c, 0xc4, 0x46, 0x6f, 0xa0, 0x3e, 0xf5, 0xd8, 0xcf, 0xc8, 0xa9, 0x49,
	0x67, 0xba, 0x81, 0x3d, 0xa8, 0x0e, 0x1d, 0x9b, 0x32, 0x2e, 0x62, 0x5c, 0xd9, 0xf3, 0x05, 0x33,
	0xdd, 0x28, 0x46, 0xdd, 0x48, 0x6c, 0x74, 0x98, 0xe6, 0x92, 0x21, 0x1a, 0xfd, 0x3a, 0x89, 0x37,
	0x8c, 0xb4, 0x0c, 0x0c, 0xcd, 0xcf, 0x0f, 0xe6, 0x6a, 0x64, 0x07, 0xdc, 0x64, 0x73, 0xba, 0x57,
	0x92, 0xd9, 0x72, 0x7b, 0xf8, 0x28, 0x4d, 0xf3, 0x5c, 0x4a, 0xec, 0x42, 0x79, 0xe6, 0x7b, 0x1c,
	0xb5, 0x41, 0x9b, 0x58, 0xd2, 0xdb, 0x32, 0xb4, 0x89, 0x95, 0x3b, 0xa3, 0x3d, 0x53, 0x66, 0xe9,
	0xe9, 0x32, 0x11, 0x94, 0x6f, 0x42, 0xdb, 0xda, 0x2b, 0xcb, 0xe3, 0x72, 0x8d, 0x8f, 0xa0, 0x19,
	0x87, 0x31, 0x68, 0xe0, 0xa3, 0x5d, 0xa8, 0x1a, 0x34, 0x08, 0x1d, 0x2e, 0x53, 0xd7, 0x8c, 0xb5,
	0x85, 0xbf, 0x43, 0xd3, 0xa0, 0x73, 0x6a, 0xff, 0xa2, 0xcb, 0x09, 0xfb, 0xe1, 0xbd, 0x02, 0x6b,
	0xf8, 0x0a, 0xb6, 0x6f, 0x7c, 0xc7, 0x33, 0xad, 0x0b, 0xdb, 0xa1, 0x06, 0xbd, 0x0f, 0x69, 0xc0,
	0x0d, 0x7a, 0xff, 0x6c, 0x68, 0x1d, 0x6a, 0x02, 0x9d, 0x65, 0x21, 0xb6, 0xf1, 0x10, 0x76, 0x0a,
	0xe2, 0x45, 0x77, 0x5a, 0xe6, 0xee, 0x14, 0x59, 0x09, 0x1f, 0x5a, 0x86, 0x8f, 0x73, 0xa8, 0x8b,
	0xe3, 0xc3, 0xbb, 0x90, 0x2d, 0x12, 0x80, 0x9a, 0x02, 0xd0, 0x36, 0x54, 0xa4, 0x53, 0x9e, 0x6a,
	0x1a, 0x91, 0x81, 0x2f, 0xa1, 0x9d, 0xcd, 0x1d, 0xf8, 0xe8, 0x10, 0xca, 0x43, 0x6f, 0x2d, 0xcb,
	0x76, 0xbf, 0x47, 0x22, 0xf7, 0x8c, 0x9b, 0x3c, 0x0c, 0x84, 0xc3, 0x90, 0xee, 0xc2, 0x1a, 0x1c,
	0x68, 0xcf, 0x28, 0xb3, 0x5e, 0x48, 0xc9, 0x29, 0x74, 0xe3, 0xce, 0x6c, 0x08, 0xe4, 0xd1, 0x7e,
	0x92, 0xad, 0x94, 0xc9, 0x76, 0x02, 0x9d, 0x5c, 0xb6, 0xa7, 0x09, 0xc3, 0x7f, 0x54, 0x68, 0xaf,
	0x63, 0xae, 0xe1, 0xaf, 0x56, 0x59, 0xb6, 0xb1, 0xa5, 0x7c, 0x63, 0x0b, 0x75, 0xbb, 0x1f, 0xe1,
	0xa7, 0x76, 0xd4, 0x26, 0xf1, 0x1b, 0xb7, 0x49, 0xac, 0xb1, 0x05, 0x8d, 0xaf, 0xe6, 0x82, 0x8a,
	0x51, 0xfa, 0x1f, 0x81, 0x2f, 0x1c, 0xf2, 0x22, 0xee, 0xf6, 0xa1, 0x99, 0x66, 0x09, 0xfc, 0xcd,
	0xa1, 0xc5, 0x07, 0xd0, 0x1e, 0x53, 0x2e, 0xdc, 0x83, 0xd5, 0x44, 0x50, 0xbc, 0x89, 0x38, 0x3d,
	0x83, 0xee, 0xa6, 0x32, 0x50, 0x03, 0xb6, 0x6e, 0xd8, 0x82, 0x79, 0x0f, 0xac, 0xab, 0xa0, 0x2a,
	0x68, 0xdf, 0x2e, 0xbb, 0x2a, 0x02, 0xa8, 0x5e, 0x98, 0xb6, 0x43, 0xad, 0xae, 0xd6, 0xff, 0x5b,
	0x81, 0xca, 0x40, 0xbc, 0x8d, 0xe8, 0x3d, 0xb4, 0x86, 0x77, 0x74, 0xbe, 0x48, 0x2e, 0x53, 0x27,
	0xf1, 0x52, 0x6f, 0x91, 0xec, 0x64, 0x63, 0x05, 0x7d, 0x80, 0xf6, 0x2c, 0xbc, 0x75, 0x6d, 0xfe,
	0x22, 0xf4, 0x39, 0xf4, 0x66, 0x94, 0xc7, 0x8d, 0x9a, 0xf1, 0x25, 0x35, 0x5d, 0xd4, 0x22, 0xd9,
	0x57, 0x40, 0xef, 0x90, 0xbc, 0x1c, 0xb0, 0x82, 0x08, 0x6c, 0x8f, 0x29, 0x8f, 0xde, 0xd6, 0x60,
	0xb0, 0x4a, 0xe8, 0x4b, 0x39, 0xd5, 0xb7, 0x48, 0xe4, 0xc6, 0xca, 0x27, 0x55, 0x88, 0x24, 0x8b,
	0xbf, 0xda, 0x28, 0x2b, 0x87, 0x1d, 0x41, 0xef, 0xd1, 0x84, 0xa3, 0x1d, 0x52, 0xf4, 0x8a, 0xe8,
	0xbb, 0xa4, 0xf0, 0x31, 0xc0, 0x0a, 0xfa, 0x08, 0x90, 0xba, 0x10, 0x90, 0x64, 0xde, 0xf5, 0x0e,
	0xc9, 0x0f, 0x31, 0x56, 0x8e, 0x55, 0xd4, 0x87, 0x46, 0x66, 0x3e, 0x50, 0x87, 0xe4, 0x67, 0x53,
	0xef, 0x92, 0x8d, 0xf1, 0x91, 0x4c, 0x37, 0xc5, 0xca, 0x63, 0xd6, 0x78, 0x69, 0x32, 0x71, 0x28,
	0xcf, 0x93, 0x5e, 0x27, 0xb1, 0x7a, 0xb1, 0x82, 0x4e, 0xa1, 0xb5, 0x46, 0x8f, 0x28, 0xb3, 0x4d,
	0xe7, 0x31, 0xbc, 0x4a, 0xa2, 0x6f, 0x9f, 0x82, 0x4e, 0xa0, 0x16, 0x2b, 0x0e, 0x35, 0x49, 0x46,
	0xe2, 0x7a, 0x8b, 0x64, 0xa5, 0x88, 0x15, 0xf4, 0x0e, 0x1a, 0x19, 0xf1, 0xa1, 0x0e, 0xc9, 0x4b,
	0x51, 0xaf, 0x10, 0x61, 0xc9, 0xfc, 0x68, 0xed, 0x12, 0x0d, 0x28, 0xd0, 0x46, 0x8c, 0x94, 0xed,
	0xca, 0x60, 0x8b, 0x9a, 0x9b, 0xc1, 0x1e, 0x42, 0x67, 0x4c, 0xb9, 0xb8, 0xe8, 0xc5, 0xd2, 0x73,
	0x65, 0xc9, 0x91, 0x37, 0x77, 0xfd, 0xc1, 0x5b, 0xe8, 0xcd, 0x3d, 0x97, 0xd0, 0xdf, 0xa6, 0xeb,
	0x3b, 0x94, 0xc8, 0x8f, 0xfe, 0x00, 0xa4, 0xbe, 0xaf, 0xc5, 0xa7, 0xff, 0x5a, 0xbd, 0xad, 0xca,
	0xff, 0x00, 0x67, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x11, 0xa0, 0xfa, 0x95, 0x12, 0x08, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BlinkClient is the client API for Blink service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BlinkClient interface {
	CheckNickname(ctx context.Context, in *Nickname, opts ...grpc.CallOption) (*NicknameResp, error)
	SubmitNickname(ctx context.Context, in *Nickname, opts ...grpc.CallOption) (*NicknameResp, error)
	SetReceiverStream(ctx context.Context, in *ReceiverInfo, opts ...grpc.CallOption) (*ReceiveRequest, error)
	GetClientsByLocation(ctx context.Context, in *Location, opts ...grpc.CallOption) (Blink_GetClientsByLocationClient, error)
	GetClientsByName(ctx context.Context, in *Nickname, opts ...grpc.CallOption) (Blink_GetClientsByNameClient, error)
	UploadFileRequest(ctx context.Context, in *UploadFileRequestReq, opts ...grpc.CallOption) (*UploadFileRequestResp, error)
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (Blink_UploadFileClient, error)
	SendRequest(ctx context.Context, in *SendRequestReq, opts ...grpc.CallOption) (*SendRequestResp, error)
	RespondGrant(ctx context.Context, in *ReceiveRequest, opts ...grpc.CallOption) (*FileLink, error)
	RespondDenial(ctx context.Context, in *ReceiveRequest, opts ...grpc.CallOption) (*Empty, error)
	MakeSpot(ctx context.Context, in *MakeSpotReq, opts ...grpc.CallOption) (*MakeSpotResp, error)
	GetSpotById(ctx context.Context, in *GetSpotByIdReq, opts ...grpc.CallOption) (*Spot, error)
	GetSpotsByNickname(ctx context.Context, in *Nickname, opts ...grpc.CallOption) (Blink_GetSpotsByNicknameClient, error)
	GetSpotsByLocation(ctx context.Context, in *Location, opts ...grpc.CallOption) (Blink_GetSpotsByLocationClient, error)
	GetFileFromSpot(ctx context.Context, in *Spot, opts ...grpc.CallOption) (*FileLink, error)
}

type blinkClient struct {
	cc *grpc.ClientConn
}

func NewBlinkClient(cc *grpc.ClientConn) BlinkClient {
	return &blinkClient{cc}
}

func (c *blinkClient) CheckNickname(ctx context.Context, in *Nickname, opts ...grpc.CallOption) (*NicknameResp, error) {
	out := new(NicknameResp)
	err := c.cc.Invoke(ctx, "/Blink/CheckNickname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blinkClient) SubmitNickname(ctx context.Context, in *Nickname, opts ...grpc.CallOption) (*NicknameResp, error) {
	out := new(NicknameResp)
	err := c.cc.Invoke(ctx, "/Blink/SubmitNickname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blinkClient) SetReceiverStream(ctx context.Context, in *ReceiverInfo, opts ...grpc.CallOption) (*ReceiveRequest, error) {
	out := new(ReceiveRequest)
	err := c.cc.Invoke(ctx, "/Blink/SetReceiverStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blinkClient) GetClientsByLocation(ctx context.Context, in *Location, opts ...grpc.CallOption) (Blink_GetClientsByLocationClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Blink_serviceDesc.Streams[0], "/Blink/GetClientsByLocation", opts...)
	if err != nil {
		return nil, err
	}
	x := &blinkGetClientsByLocationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Blink_GetClientsByLocationClient interface {
	Recv() (*Client, error)
	grpc.ClientStream
}

type blinkGetClientsByLocationClient struct {
	grpc.ClientStream
}

func (x *blinkGetClientsByLocationClient) Recv() (*Client, error) {
	m := new(Client)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blinkClient) GetClientsByName(ctx context.Context, in *Nickname, opts ...grpc.CallOption) (Blink_GetClientsByNameClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Blink_serviceDesc.Streams[1], "/Blink/GetClientsByName", opts...)
	if err != nil {
		return nil, err
	}
	x := &blinkGetClientsByNameClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Blink_GetClientsByNameClient interface {
	Recv() (*Client, error)
	grpc.ClientStream
}

type blinkGetClientsByNameClient struct {
	grpc.ClientStream
}

func (x *blinkGetClientsByNameClient) Recv() (*Client, error) {
	m := new(Client)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blinkClient) UploadFileRequest(ctx context.Context, in *UploadFileRequestReq, opts ...grpc.CallOption) (*UploadFileRequestResp, error) {
	out := new(UploadFileRequestResp)
	err := c.cc.Invoke(ctx, "/Blink/UploadFileRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blinkClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (Blink_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Blink_serviceDesc.Streams[2], "/Blink/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &blinkUploadFileClient{stream}
	return x, nil
}

type Blink_UploadFileClient interface {
	Send(*FileChunk) error
	CloseAndRecv() (*UploadFileResp, error)
	grpc.ClientStream
}

type blinkUploadFileClient struct {
	grpc.ClientStream
}

func (x *blinkUploadFileClient) Send(m *FileChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *blinkUploadFileClient) CloseAndRecv() (*UploadFileResp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadFileResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blinkClient) SendRequest(ctx context.Context, in *SendRequestReq, opts ...grpc.CallOption) (*SendRequestResp, error) {
	out := new(SendRequestResp)
	err := c.cc.Invoke(ctx, "/Blink/SendRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blinkClient) RespondGrant(ctx context.Context, in *ReceiveRequest, opts ...grpc.CallOption) (*FileLink, error) {
	out := new(FileLink)
	err := c.cc.Invoke(ctx, "/Blink/RespondGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blinkClient) RespondDenial(ctx context.Context, in *ReceiveRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Blink/RespondDenial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blinkClient) MakeSpot(ctx context.Context, in *MakeSpotReq, opts ...grpc.CallOption) (*MakeSpotResp, error) {
	out := new(MakeSpotResp)
	err := c.cc.Invoke(ctx, "/Blink/MakeSpot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blinkClient) GetSpotById(ctx context.Context, in *GetSpotByIdReq, opts ...grpc.CallOption) (*Spot, error) {
	out := new(Spot)
	err := c.cc.Invoke(ctx, "/Blink/GetSpotById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blinkClient) GetSpotsByNickname(ctx context.Context, in *Nickname, opts ...grpc.CallOption) (Blink_GetSpotsByNicknameClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Blink_serviceDesc.Streams[3], "/Blink/GetSpotsByNickname", opts...)
	if err != nil {
		return nil, err
	}
	x := &blinkGetSpotsByNicknameClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Blink_GetSpotsByNicknameClient interface {
	Recv() (*Spot, error)
	grpc.ClientStream
}

type blinkGetSpotsByNicknameClient struct {
	grpc.ClientStream
}

func (x *blinkGetSpotsByNicknameClient) Recv() (*Spot, error) {
	m := new(Spot)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blinkClient) GetSpotsByLocation(ctx context.Context, in *Location, opts ...grpc.CallOption) (Blink_GetSpotsByLocationClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Blink_serviceDesc.Streams[4], "/Blink/GetSpotsByLocation", opts...)
	if err != nil {
		return nil, err
	}
	x := &blinkGetSpotsByLocationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Blink_GetSpotsByLocationClient interface {
	Recv() (*Spot, error)
	grpc.ClientStream
}

type blinkGetSpotsByLocationClient struct {
	grpc.ClientStream
}

func (x *blinkGetSpotsByLocationClient) Recv() (*Spot, error) {
	m := new(Spot)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blinkClient) GetFileFromSpot(ctx context.Context, in *Spot, opts ...grpc.CallOption) (*FileLink, error) {
	out := new(FileLink)
	err := c.cc.Invoke(ctx, "/Blink/GetFileFromSpot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlinkServer is the server API for Blink service.
type BlinkServer interface {
	CheckNickname(context.Context, *Nickname) (*NicknameResp, error)
	SubmitNickname(context.Context, *Nickname) (*NicknameResp, error)
	SetReceiverStream(context.Context, *ReceiverInfo) (*ReceiveRequest, error)
	GetClientsByLocation(*Location, Blink_GetClientsByLocationServer) error
	GetClientsByName(*Nickname, Blink_GetClientsByNameServer) error
	UploadFileRequest(context.Context, *UploadFileRequestReq) (*UploadFileRequestResp, error)
	UploadFile(Blink_UploadFileServer) error
	SendRequest(context.Context, *SendRequestReq) (*SendRequestResp, error)
	RespondGrant(context.Context, *ReceiveRequest) (*FileLink, error)
	RespondDenial(context.Context, *ReceiveRequest) (*Empty, error)
	MakeSpot(context.Context, *MakeSpotReq) (*MakeSpotResp, error)
	GetSpotById(context.Context, *GetSpotByIdReq) (*Spot, error)
	GetSpotsByNickname(*Nickname, Blink_GetSpotsByNicknameServer) error
	GetSpotsByLocation(*Location, Blink_GetSpotsByLocationServer) error
	GetFileFromSpot(context.Context, *Spot) (*FileLink, error)
}

// UnimplementedBlinkServer can be embedded to have forward compatible implementations.
type UnimplementedBlinkServer struct {
}

func (*UnimplementedBlinkServer) CheckNickname(ctx context.Context, req *Nickname) (*NicknameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckNickname not implemented")
}
func (*UnimplementedBlinkServer) SubmitNickname(ctx context.Context, req *Nickname) (*NicknameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitNickname not implemented")
}
func (*UnimplementedBlinkServer) SetReceiverStream(ctx context.Context, req *ReceiverInfo) (*ReceiveRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetReceiverStream not implemented")
}
func (*UnimplementedBlinkServer) GetClientsByLocation(req *Location, srv Blink_GetClientsByLocationServer) error {
	return status.Errorf(codes.Unimplemented, "method GetClientsByLocation not implemented")
}
func (*UnimplementedBlinkServer) GetClientsByName(req *Nickname, srv Blink_GetClientsByNameServer) error {
	return status.Errorf(codes.Unimplemented, "method GetClientsByName not implemented")
}
func (*UnimplementedBlinkServer) UploadFileRequest(ctx context.Context, req *UploadFileRequestReq) (*UploadFileRequestResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFileRequest not implemented")
}
func (*UnimplementedBlinkServer) UploadFile(srv Blink_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (*UnimplementedBlinkServer) SendRequest(ctx context.Context, req *SendRequestReq) (*SendRequestResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRequest not implemented")
}
func (*UnimplementedBlinkServer) RespondGrant(ctx context.Context, req *ReceiveRequest) (*FileLink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RespondGrant not implemented")
}
func (*UnimplementedBlinkServer) RespondDenial(ctx context.Context, req *ReceiveRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RespondDenial not implemented")
}
func (*UnimplementedBlinkServer) MakeSpot(ctx context.Context, req *MakeSpotReq) (*MakeSpotResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeSpot not implemented")
}
func (*UnimplementedBlinkServer) GetSpotById(ctx context.Context, req *GetSpotByIdReq) (*Spot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpotById not implemented")
}
func (*UnimplementedBlinkServer) GetSpotsByNickname(req *Nickname, srv Blink_GetSpotsByNicknameServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSpotsByNickname not implemented")
}
func (*UnimplementedBlinkServer) GetSpotsByLocation(req *Location, srv Blink_GetSpotsByLocationServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSpotsByLocation not implemented")
}
func (*UnimplementedBlinkServer) GetFileFromSpot(ctx context.Context, req *Spot) (*FileLink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileFromSpot not implemented")
}

func RegisterBlinkServer(s *grpc.Server, srv BlinkServer) {
	s.RegisterService(&_Blink_serviceDesc, srv)
}

func _Blink_CheckNickname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nickname)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlinkServer).CheckNickname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blink/CheckNickname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlinkServer).CheckNickname(ctx, req.(*Nickname))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blink_SubmitNickname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nickname)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlinkServer).SubmitNickname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blink/SubmitNickname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlinkServer).SubmitNickname(ctx, req.(*Nickname))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blink_SetReceiverStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiverInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlinkServer).SetReceiverStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blink/SetReceiverStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlinkServer).SetReceiverStream(ctx, req.(*ReceiverInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blink_GetClientsByLocation_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Location)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlinkServer).GetClientsByLocation(m, &blinkGetClientsByLocationServer{stream})
}

type Blink_GetClientsByLocationServer interface {
	Send(*Client) error
	grpc.ServerStream
}

type blinkGetClientsByLocationServer struct {
	grpc.ServerStream
}

func (x *blinkGetClientsByLocationServer) Send(m *Client) error {
	return x.ServerStream.SendMsg(m)
}

func _Blink_GetClientsByName_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Nickname)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlinkServer).GetClientsByName(m, &blinkGetClientsByNameServer{stream})
}

type Blink_GetClientsByNameServer interface {
	Send(*Client) error
	grpc.ServerStream
}

type blinkGetClientsByNameServer struct {
	grpc.ServerStream
}

func (x *blinkGetClientsByNameServer) Send(m *Client) error {
	return x.ServerStream.SendMsg(m)
}

func _Blink_UploadFileRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileRequestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlinkServer).UploadFileRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blink/UploadFileRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlinkServer).UploadFileRequest(ctx, req.(*UploadFileRequestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blink_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BlinkServer).UploadFile(&blinkUploadFileServer{stream})
}

type Blink_UploadFileServer interface {
	SendAndClose(*UploadFileResp) error
	Recv() (*FileChunk, error)
	grpc.ServerStream
}

type blinkUploadFileServer struct {
	grpc.ServerStream
}

func (x *blinkUploadFileServer) SendAndClose(m *UploadFileResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *blinkUploadFileServer) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Blink_SendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlinkServer).SendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blink/SendRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlinkServer).SendRequest(ctx, req.(*SendRequestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blink_RespondGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlinkServer).RespondGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blink/RespondGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlinkServer).RespondGrant(ctx, req.(*ReceiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blink_RespondDenial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlinkServer).RespondDenial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blink/RespondDenial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlinkServer).RespondDenial(ctx, req.(*ReceiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blink_MakeSpot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeSpotReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlinkServer).MakeSpot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blink/MakeSpot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlinkServer).MakeSpot(ctx, req.(*MakeSpotReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blink_GetSpotById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpotByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlinkServer).GetSpotById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blink/GetSpotById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlinkServer).GetSpotById(ctx, req.(*GetSpotByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blink_GetSpotsByNickname_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Nickname)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlinkServer).GetSpotsByNickname(m, &blinkGetSpotsByNicknameServer{stream})
}

type Blink_GetSpotsByNicknameServer interface {
	Send(*Spot) error
	grpc.ServerStream
}

type blinkGetSpotsByNicknameServer struct {
	grpc.ServerStream
}

func (x *blinkGetSpotsByNicknameServer) Send(m *Spot) error {
	return x.ServerStream.SendMsg(m)
}

func _Blink_GetSpotsByLocation_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Location)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlinkServer).GetSpotsByLocation(m, &blinkGetSpotsByLocationServer{stream})
}

type Blink_GetSpotsByLocationServer interface {
	Send(*Spot) error
	grpc.ServerStream
}

type blinkGetSpotsByLocationServer struct {
	grpc.ServerStream
}

func (x *blinkGetSpotsByLocationServer) Send(m *Spot) error {
	return x.ServerStream.SendMsg(m)
}

func _Blink_GetFileFromSpot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Spot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlinkServer).GetFileFromSpot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blink/GetFileFromSpot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlinkServer).GetFileFromSpot(ctx, req.(*Spot))
	}
	return interceptor(ctx, in, info, handler)
}

var _Blink_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Blink",
	HandlerType: (*BlinkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckNickname",
			Handler:    _Blink_CheckNickname_Handler,
		},
		{
			MethodName: "SubmitNickname",
			Handler:    _Blink_SubmitNickname_Handler,
		},
		{
			MethodName: "SetReceiverStream",
			Handler:    _Blink_SetReceiverStream_Handler,
		},
		{
			MethodName: "UploadFileRequest",
			Handler:    _Blink_UploadFileRequest_Handler,
		},
		{
			MethodName: "SendRequest",
			Handler:    _Blink_SendRequest_Handler,
		},
		{
			MethodName: "RespondGrant",
			Handler:    _Blink_RespondGrant_Handler,
		},
		{
			MethodName: "RespondDenial",
			Handler:    _Blink_RespondDenial_Handler,
		},
		{
			MethodName: "MakeSpot",
			Handler:    _Blink_MakeSpot_Handler,
		},
		{
			MethodName: "GetSpotById",
			Handler:    _Blink_GetSpotById_Handler,
		},
		{
			MethodName: "GetFileFromSpot",
			Handler:    _Blink_GetFileFromSpot_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetClientsByLocation",
			Handler:       _Blink_GetClientsByLocation_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetClientsByName",
			Handler:       _Blink_GetClientsByName_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadFile",
			Handler:       _Blink_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetSpotsByNickname",
			Handler:       _Blink_GetSpotsByNickname_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSpotsByLocation",
			Handler:       _Blink_GetSpotsByLocation_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "blink.proto",
}
